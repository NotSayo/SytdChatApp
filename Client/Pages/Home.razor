@page "/"
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Connections
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Nav
@inject ILocalStorageService LocalStorage
@inject HubConnection Connection

<PageTitle>Chat App</PageTitle>

<div class="container mt-4">
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">
            <h5>Error loading service:</h5>
            <p>@ErrorMessage</p>
        </div>
    }
    else if (string.IsNullOrEmpty(Name))
    {
        <div class="card shadow p-4">
            <h5 class="mb-3">Enter your name:</h5>
            <input type="text" class="form-control mb-2" @bind="NewName" placeholder="Your name..." />
            @if (!string.IsNullOrEmpty(SetNameError))
            {
                <div class="text-danger">@SetNameError</div>
            }
            <button class="btn btn-primary mt-2" @onclick="SubmitName">Join Chat</button>
        </div>
    }
    else
    {
        <div class="card shadow p-4 mt-3">
            <h4 class="mb-3">Join or Create a Chat Room</h4>
            <div class="d-flex flex-wrap align-items-center gap-2">
                <button class="btn btn-success" @onclick="CreateRoom">
                    <i class="bi bi-plus-circle"></i> Create Room
                </button>
                <div class="input-group w-auto">
                    <input type="text" class="form-control" @bind="RoomCode" placeholder="Enter Room Code..." />
                    <button class="btn btn-primary" @onclick="JoinRoom">
                        <i class="bi bi-box-arrow-in-right"></i> Join
                    </button>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(RoomJoinError))
            {
                <div class="alert alert-danger mt-2">
                    <i class="bi bi-exclamation-circle"></i> @RoomJoinError
                </div>
            }
        </div>

        <h4 class="mt-4">Available Rooms</h4>
        @if (AvailabeRooms.Any())
        {
            <div class="list-group mt-2">
                @foreach (var room in AvailabeRooms)
                {
                    <button class="list-group-item list-group-item-action d-flex justify-content-between align-items-center"
                            style="cursor: pointer;"
                            title="Click to join this room"
                            @onclick="() => JoinRoomByCode(room)">
                        <div>
                            <strong>Room Code: @room</strong>
                            <span class="badge bg-primary ms-2">Click to Join</span>
                        </div>
                        <i class="bi bi-box-arrow-in-right text-primary"></i>
                    </button>
                }
            </div>
        }
        else
        {
            <div class="alert alert-secondary mt-2">
                <i class="bi bi-info-circle"></i> No active rooms available. Create one to get started!
            </div>
        }
    }


</div>

@code {
    public string? ErrorMessage { get; set; }
    public string? SetNameError { get; set; }
    public string? RoomJoinError { get; set; }

    private string NewName { get; set; } = "";
    private string Name { get; set; } = "";
    public string RoomCode { get; set; } = "";

    public List<string> AvailabeRooms { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            if(Connection.State != HubConnectionState.Connected)
                await Connection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return;
        }

        RegisterEvents();

        await Connection.InvokeAsync("GetRooms");
        var takenName = await LocalStorage.GetItemAsStringAsync("username");
        if (string.IsNullOrEmpty(takenName))
            return;
        Name = takenName;
        await LocalStorage.RemoveItemAsync("username");
        await InvokeAsync(StateHasChanged);
    }

    private void RegisterEvents()
    {
        Connection!.On("NameExistsError", async () =>
        {
            SetNameError = "Name already exists";
            await InvokeAsync(StateHasChanged);
        });

        Connection!.On<string>("NameSet", async (username) =>
        {
            Name = username;
            await InvokeAsync(StateHasChanged);
        });

        Connection!.On<string>("MoveToRoom", async (code) =>
        {
            await LocalStorage.SetItemAsStringAsync("username", Name);
            Nav.NavigateTo($"/chat/{code}");
        });

        Connection!.On("RoomDoesNotExist", async () =>
        {
            RoomJoinError = "Room does not exist";
            await InvokeAsync(StateHasChanged);
        });

        Connection!.On<List<string>>("ReceiveRooms", async (rooms) =>
        {
            AvailabeRooms = rooms;
            await InvokeAsync(StateHasChanged);
        });
    }

    private async Task SubmitName()
    {
        await Connection!.InvokeAsync("SetName", NewName);
        NewName = "";
    }

    private async Task CreateRoom()
    {
        await Connection!.InvokeAsync("CreateRoom");
    }

    private async Task JoinRoom()
    {
        await Connection!.InvokeAsync("JoinRoom", RoomCode);
    }

    private async Task JoinRoomByCode(string code)
    {
        RoomCode = code;
        await JoinRoom();
    }

}
