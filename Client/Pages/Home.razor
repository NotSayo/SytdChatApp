@page "/"
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Nav
@inject ILocalStorageService LocalStorage
@inject HubConnection Connection

<PageTitle>Chat App</PageTitle>

<div class="container mt-4">
    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <div class="alert alert-danger">
            <h5>Error loading service:</h5>
            <p>@ErrorMessage</p>
        </div>
    }
    else if (string.IsNullOrEmpty(Name))
    {
        <div class="card shadow p-4">
            <h5 class="mb-3">Enter your name:</h5>
            <input type="text" class="form-control mb-2" @bind="NewName" placeholder="Your name..." />
            @if (!string.IsNullOrEmpty(SetNameError))
            {
                <div class="text-danger">@SetNameError</div>
            }
            <button class="btn btn-primary mt-2" @onclick="SubmitName">Join Chat</button>
        </div>
    }
    else
    {
        <button @onclick="CreateRoom">Create Room</button>
        <input @bind="RoomCode"/>
        <button @onclick="JoinRoom">Join Room</button>
    }
</div>

@code {
    public string? ErrorMessage { get; set; }
    public string? SetNameError { get; set; }
    public string? RoomJoinError { get; set; }

    private string NewName { get; set; } = "";
    private string Name { get; set; } = "";
    public string RoomCode { get; set; } = "";


    protected override async Task OnInitializedAsync()
    {
        try
        {
            if(Connection.State != HubConnectionState.Connected)
                await Connection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return;
        }

        RegisterEvents();
    }

    private void RegisterEvents()
    {
        Connection!.On("NameExistsError", async () =>
        {
            SetNameError = "Name already exists";
            await InvokeAsync(StateHasChanged);
        });

        Connection!.On<string>("NameSet", async (username) =>
        {
            Name = username;
            await InvokeAsync(StateHasChanged);
        });

        Connection!.On<string>("MoveToRoom", async (code) =>
        {
            await LocalStorage.SetItemAsStringAsync("username", Name);
            Nav.NavigateTo($"/chat/{code}");
        });

        Connection!.On("RoomDoesNotExist", async () =>
        {
            RoomJoinError = "Room does not exist";
            await InvokeAsync(StateHasChanged);
        });
    }

    private async Task SubmitName()
    {
        await Connection!.InvokeAsync("SetName", NewName);
        NewName = "";
    }

    private async Task CreateRoom()
    {
        await Connection!.InvokeAsync("CreateRoom");
    }

    private async Task JoinRoom()
    {
        await Connection!.InvokeAsync("JoinRoom", RoomCode);
    }




}
