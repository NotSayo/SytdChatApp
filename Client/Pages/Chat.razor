@page "/Chat/{Code}"
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Nav
@inject ILocalStorageService LocalStorage
@inject HubConnection Connection

<PageTitle>Chat App</PageTitle>

<div class="card shadow p-4">
    <div class="d-flex justify-content-between align-items-center">
        <button class="btn btn-secondary" @onclick="GoBack">
            <i class="bi bi-arrow-left"></i> Go Back
        </button>
        <h3 class="mb-0">Chat Room</h3>
    </div>
    <hr />
    <h4 class="mb-3">Room Code: <span class="badge bg-primary">@Code</span></h4>

    <div class="chat-box border p-3 mb-3" style="height: 300px; overflow-y: auto;">
        @foreach (var message in Messages)
        {
            @if (message.Owner == "System")
            {
                <div class="text-primary">
                    <strong>📢 @message.Owner</strong> <span class="text-muted">(@message.SendDate.ToShortTimeString())</span>
                    <p class="small">@message.Content</p>
                </div>
            }
            else
            {
                <div class="mb-2">
                    <strong>@message.Owner</strong> <span class="text-muted">(@message.SendDate.ToShortTimeString())</span>
                    <p class="small">@message.Content</p>
                </div>
            }
        }
    </div>

    <div>
        <label class="form-label">Enter your message:</label>
        <input class="form-control mb-2" @bind="NewMessage" placeholder="Type a message..." />
        <button class="btn btn-success mt-2" @onclick="SendMessage">Send</button>
    </div>

    <hr />

    <div>
        <h4 class="mb-3"><i class="bi bi-people-fill text-primary"></i> Active Users</h4>
        <div class="border rounded p-2 bg-light" style="max-height: 150px; overflow-y: auto;">
            @if (Users.Any())
            {
                @foreach (var user in Users)
                {
                    <div class="d-flex align-items-center p-2 border-bottom">
                        <span>@user</span>
                    </div>
                }
            }
            else
            {
                <p class="text-muted text-center mb-0">No users in this room.</p>
            }
        </div>
    </div>
</div>



@code {
    [SupplyParameterFromQuery]
    [Parameter]
    public required string Code { get; set; }

    public List<string> Users { get; set; } = new();

    public string Name { get; set; } = "";

    private List<Message> Messages { get; set; } = new();
    private string NewMessage { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            if(Connection.State != HubConnectionState.Connected)
                await Connection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return;
        }

        var name = await LocalStorage.GetItemAsStringAsync("username");
        if (string.IsNullOrEmpty(name))
        {
            Nav.NavigateTo("/");
            return;
        }

        Name = name;
        await LocalStorage.RemoveItemAsync("username");

        RegisterEvents();

        await Connection.InvokeAsync("GetRoomsWithUsers", Code);
    }

    private void RegisterEvents()
    {
        Connection!.On<Message>("ReceiveMessage", async (msg) =>
        {
            Messages.Add(msg);
            await InvokeAsync(StateHasChanged);
        });

        Connection!.On<string>("UserChange", async (msg) =>
        {
            Messages.Add(new Message
            {
                Owner = "System",
                Content = msg,
                SendDate = DateTime.Now
            });
            await InvokeAsync(StateHasChanged);
        });

        Connection.On<Dictionary<string, List<string>>>("ReceiveRoomsWithUsers", async (roomInfo) =>
        {
            Users = roomInfo[Code];
            await InvokeAsync(StateHasChanged);
        });
    }

    public async Task SendMessage()
    {
        await Connection!.SendAsync("SendMessage", Code, new Message()
        {
            Owner = Name,
            Content = NewMessage,
            SendDate = DateTime.Now
        });
        NewMessage = "";
    }

    private class Message
    {
        public required string Owner { get; set; }
        public required string Content { get; set; }
        public required DateTime SendDate { get; set; }
    }

    private async Task GoBack()
    {
        await Connection.InvokeAsync("LeaveRoom", Code);
        await LocalStorage.SetItemAsStringAsync("username", Name);
        Nav.NavigateTo("/");
    }
}
